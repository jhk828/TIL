Python으로 돌아가 Django에 대해서 알아보자

 
라이브러리
 - 특수한 처리를 하기 위해 만들어진 함수집합
 - ex) jQuery
 - 장점 : 내가 모든 것을 다 작성할 필요가 없다.
 - 단점(특징) : 전체 프로그램의 로직을 담당하지는 않는다.
				예를들면) jQuery를 이용해서 영화 정보를 출력하는 문제를 구현할 때, 사람마다 구현이 제각각
						  유지보수가 어려워짐
						  
프레임워크 (Framework)
 - 프로그램의 전체적인 로직 부분 (구조)이 이미 구현이 되어있다. 
   (전체적으로 시스템이 어떻게 돌아갈지, 프로세스 처리 구조)
 - 그래서 프레임워크를 사용할 때는 기본적으로 사용되는 소스코드가 제공된다. (스캐폴딩 - scaffolding)
 - 유지보수성이 좋다.
 - 단, 처음에 프레임워크의 동작원리를 이해하는 작업이 필요하다.
 
 
Django 
 - Python으로 만들어진 오픈 소스
 - 웹 어플리케이션을 쉽게 작성할 수 있도록 도와주는 Framework
 - Django를 이용하면 많이, 자주 구현해야 하는 내용을 쉽게 구현할 수 있다.
 
Django의 특징
 1. 장고는 MVC Model을 기반으로 한 MVT 모델을 이용한다. 
	- MVC Model : Model, View, Controller (View - 결과 화면 담당)
	- MVT Model : Model, View, Template
				  => Model : 데이터베이스 처리
				     View : 로직 담당, 프로세스 처리
					 Template : 클라이언트에게 보여줄 화면 담당
				 
======================================================================

간단한 Web Application 만들기

1. Django 설치
	DOS창에서 pip를 이용해서 Django를 설치
	pip : python install package (프로그램)
	PyPI (Python Package Index)라는 repository에 있는 Django를 설치
	pip install Django

2. Project Setup
	시작은 프로젝트의 뼈대를 만드는 일부터 시작
	
	1) 폴더를 하나 만든다. C:/python-Django
	 C:\>cd python-Django
	 C:\python-Django>django-admin startproject mysite
	 
	2) 명령어를 입력해서 scaffolding을 한다.
	  -> C:\python-Django\mysite라는 폴더 이름 => MyFirstWebPoll
		 C:\python-Django\MyFirstWebPoll\mysite 과의 혼동 방지
		 
	   C:\python-Django>cd MyFirstWebPoll 
	 - 프로젝트 : 구현하는 전체 시스템
	 - 웹 어플리케이션 : 프로젝트 안에서의 여러가지의 프로그램 (ex) 투표, 도서관리, 회원가입 등등
	 
	3) 프로젝트에 하나의 application을 추가해보자
	  C:\python-Django\MyFirstWebPoll>python manage.py startapp polls
	  => 수행시키면 polls라는 application이 생성된다. (당연히 폴더가 생성되고 필요한 파일들이 scaffolding된다.)
	  
	  
	  C:\python-Django\MyFirstWebPoll\mysite 는 - 전체 프로젝트에 대한 설정을 담당한다.
	  
=> 기본적인 파일 구조는 생성되었으니, 파일들 수정은 PyCharm으로 처리한다.


1> settings.py로 프로젝트 설정 처리

# C:\python-Django\MyFirstWebPoll\mysite\settings.py
1) 
DEBUG = True    # DEBUG = True => 개발 모드
                # DEBUG = False = > 운영모드
                

ALLOWED_HOSTS = []
# DEBUG = True => ALLOWED_HOSTS 비워놔도 된다.
# ALLOWED_HOSTS = ['localhost', '127.0.0.1' ] 자동 세팅됨

# DEBUG = False =>
# ALLOWED_HOSTS = [ 실제 운영되는 서버의 IP 주소나 Domain Name]

2) 
# Application definition
# 개발할 web application을 추가해줘야 한다.
# 내가 만들 응용프로그램을 지칭하는 class명 추가
INSTALLED_APPS = [  'polls.apps.PollsConfig' ] 추가

cf) 클래스 명은 C:\python-Django\MyFirstWebPoll\polls\apps.py 안에
class PollsConfig(AppConfig):
    name = 'polls'
	
cf) polls 패키지명
	apps 모듈명
	PollsConfig 클래스명
	
3) TimeZone 수정
# TIME_ZONE = 'UTC'   # 세계 표준시
TIME_ZONE = 'Asia/Seoul'


##########################################################################

2> Django 특징 중 하나 - 관리자 모드(화면)를 기본으로 제공한다.
 - 관리자에 대한 ID, PW가 존재해야 하며, DB 어딘가에는 저장되어 있어야 한다.
 - 따라서, Django는 기본적으로 데이터베이스가 설정된 상태로 사용해야 한다.
 
=> 기본 테이블 (기본 데이터베이스)를 생성해야 한다.

1) Django의 default DB는 SQLite

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),	# 실제로 아직 생성 안되있음
    }
}

2)
C:\python-Django\MyFirstWebPoll>python manage.py migrate
 SQLite 파일 생성됨 C:\python-Django\MyFirstWebPoll\db.sqlite3
 
3) 
서버 가동을 해 보아요.
 내장된 테스트 서버를 이용해서 프로젝트를 deploy
 C:\python-Django\MyFirstWebPoll>python manage.py runserver
 
4) 브라우저에서 접속
  http://localhost:8000
  http://localhost:8000/admin => 관리자화면

5) 관리자 ID와 PW 생성
(서버 끄기 ctrl + c)
 C:\python-Django\MyFirstWebPoll>python manage.py createsuperuser
	Username (leave blank to use 'i'):user01
	Email address: user01@naver.com
	Password: 123123
	Password (again): 123123
	This password is too short. It must contain at least 8 characters.
	This password is too common.
	This password is entirely numeric.
	Bypass password validation and create user anyway? [y/N]: y
	Superuser created successfully.
	
	http://localhost:8000/admin 에서 로그인 가능
 
##########################################################################


3. polls application 구현
 1> Model 생성부터 한다.
 
 Database - 데이터의 집합체
 DBMS (Database Management System) : 데이터베이스를 구축하고, 원하는 정보를 추출하고, 새로운 정보를 입력하고, 기존 데이터를 삭제하고, 기존 데이터를 수정하는 작업을 진행하는 프로그램
 sqlite3라는 DBMS를 Django에서는 default로 사용
 
 이런 데이터베이스는 언제부터 사용되었을까?
  - 아주아주 초창기에는 데이터를 이렇게 만들어서 오래 썼다. -> 계층형 데이터베이스 / 폴더형
  - 한 사람이 등장해서 논문을 발표 -> Relation Database
  - IBM에서 이걸 가지고 DBMS를 만든다. -> DB2 -> 성공했다. 성능도 좋고 사용하기도 편했다.
	-> 다른 모든 회사들도 이 논문을 근간으로 DBMS를 만들어서 판매 => Relational Database (관계형 데이터베이스)
  - 여기에 객체지향 개념이 들어가서 <객체 관계형 데이터 베이스> 탄생
 
 200730_db1.jpg
 200730_db2.jpg
 
##########################################################################

# Model 작업은 우리가 사용하는 Database에 Table을 생성하는 작업이다. 
  - Table = Relation 
  
C:\python-Django\MyFirstWebPoll\polls\models.py
  
  
def __repr__(self): 
	# 어떤 연산을 하기 위해서보다는 
	# 객체를 내가 원하는 특정 문자열로 표현
	
	
def __str__(self): 
	#  연산을 위해 문자열로 변환하고 싶을 때는
	# Django에서 Table 만들어서 확인할 때는 __str__ 이용
	

2) Model 등록
C:\python-Django\MyFirstWebPoll\polls\admin.py
  admin.site.register(Question)
  admin.site.register(Choice)
	
	
3) SQLite에 DB 등록

# class를 가지고 db에 migration할 수 있는 명세
 C:\python-Django\MyFirstWebPoll>python manage.py makemigrations
 Migrations for 'polls':
  polls\migrations\0001_initial.py
    - Create model Question
    - Create model Choice
	
C:\python-Django\MyFirstWebPoll>python manage.py migrate
 
http://localhost:8000/admin/ 접속 -> polls에 두 개 등록되어있음


https://sqlitebrowser.org/blog/portableapp-for-3-12-0-release-now-available/
에서 
C:\python-Django\MyFirstWebPoll\db.sqlite3

파일로 db 구조를 볼 수 있다.

