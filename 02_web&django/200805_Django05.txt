2020년 8월 5일 수요일

Polls project에서 배웠던 내용을 기반으로
ModelForm을 이용해서 CRUID 구현을 Bootstrap까지 포함해서 알아보자
CRUID (Create, Read, Update, Delete)

ModelForm을 이용하면, 사용자 입력 양식 처리하는게 한결 쉬워진다.
여기에 Bootstrap도 포함해서 Web application을 만들어 보자.

1. 필요한 package들을 설치한다.
 - pip install Django
   패키지 설치 시에는 특정 경로에 구애받지 않는다.
 - 추가적으로 bootstrap에 대한 package를 설치하려 한다.
   일반적인 HTML 파일을 만들고 Bootstrap CDN과 tag 속성을 이용하면 Bootstrap을 이용할 수 있다.
   그런데 이번에는, ModelForm을 이용할 것이고, 사용자 입력 양식 HTML을 자동으로 만들어준다.
   자동으로 생성되기 때문에 Bootstrap을 적용할 수 없다.
   따라서 이런 경우에 사용자 입력 양식에 Bootstrap을 적용하기 위해서 특정 package를 설치해야 한다.
   - pip install Django-bootstrap4
 
2. Project를 생성 + appliaction 생성
	Django는 framework이고 당연히 scaffolding 기능을 제공한다.
    - 특정 명령어를 이용해서 필요한 폴더와 파일을 자동으로 생성해야 한다.
	- cmd로 command 창을 열고 현재 working directory를 python-Django로 변경한다.
		C:\python-Django>django-admin startproject blog
		해당 명령을 실행하면 기본적인 프로젝트 구조가 만들어진다.
		
	- 프로젝트(blog)와 앞으로 생성할 application을 포함하고 있는 폴더가 만들어지는데, 이 폴더의 이름을 MyBlogSystem으로 변경한다.
	- 다른 언어는 project가 전체 application들을 포함하지만, Django는 project-application-application => 한 폴더 안
	
	- 하나의 application을 project에 추가한다.
	  C:\python-Django\MyBlogSystem>python manage.py startapp posts

3. Project 설정 (setting)
	- blog project 폴더 안에 있는 settings.py 파일을 수정해서 설정을 잡는다.
	1) INSTALLED_APPS = [
		'posts.apps.PostsConfig',
		'bootstrap4',
	]
	
	2) BASE_DIR (MyBlogSystem)/ blog/ templates 폴더를 templates 폴더로 쓴다고 지칭한다.
	   - 모든 Django App에 공통적으로 적용되는 Base 
	   
	   TEMPLATES = [
		{
			'DIRS': [os.path.join(BASE_DIR, 'blog', 'templates')],

	3) 
	STATIC_URL = '/static/'
	STATICFILES_DIRS = [
		os.path.join(BASE_DIR, 'static')
	]	
	
	
	3-1) MyBlogSystem 바로 하위에 static이라는 폴더 생성
	
4. 우리의 project를 web에 deploy 해 봐야 한다.
	- 다른 언어는 db 안쓰면 안만들어도 되는데, 
	  Django는 admin 페이지가 존재하기 때문에 db를 만들고 난 후 web에 deploy 해야 한다.
	- 기본 Table 생성하기
		python manage.py migrate
	- 관리자 계정이 있어야 Admin Page (관리자 화면)를 사용할 수 있다.
		python manage.py createsuperuser
	- 설정을 다 했으니 이제 web에 deploy를 해 보자.
	    python manage.py runserver
		
	- view-> templates 를 거쳐서 resource를 보여주지 않고, static 폴더로 정적 resource에 바로 접근
		http://127.0.0.1:8000/static/a.jpg
		
		
		
==========프로젝트 기본 설정 완성==================

5. Model 구현 
	: 기능/appliaction을 구현한다. 
	- 기능을 구현할 때 제일 먼저 해야 하는 일은,
		사용할 데이터에 대한 정확한 명세 하기.
	- Django는 ORM을 이용하기 때문에, class를 이용해서 Database를 사용한다.
	1) Model을 만들어야 한다.
		posts application 폴더 내에, models.py 파일에 Model을 정의
		class Post(models.Model) 정의
	
	2) 이렇게 만든 model을 Admin Page에 반영
		admin.py에 class 등록
			
		from posts.models import Post
		admin.site.register(Post)	
	
	3) Model을 생성했기 때문에 데이터베이스에 변경이 필요하다.
	   3-1) 데이터베이스를 어떻게 변경할지 명세 (초안)이 필요하다.
		python manage.py makemigrations
		
	   3-2) 초안이 완성되면 실제로 데이터베이스에 적용해서 Table을 생성한다.
		python manage.py migrate	
	
		# DB 꼬여서 다 지우려면 migrations 폴더 안을 지우면 된다.
	
	
6. URL 경로 설정
	blog project 안에 urls.py 부터 설정해야 한다.
	1) post appliaction 안에서 urls.py를 설정해야 한다.
	
	   # 특정 html을, 특정 url이 들어왔을 때 보내주도록 설정한다.
	   url(r"^$", TemplateView.as_view(template_name='index.html'), name="home"),

	<정규표현식 (regular expression)>
	 - Django는 elegant URL을 지원한다.

	 - 시작 => ^ , 끝 => $
	 - [0-9] : 1글자를 지침
	 - {3} : 3번 반복
	 - {1, 3} : 1~3번 반복
	 - [0-9]{4} : 4자리 숫자라는 뜻
	 - r (raw)은 escape (\) 문자를 한번 더 사용하지 않도록 처리
	 - 원래 \\ 로 써야 하는데 r을 붙이면 \
	 - r"^[0-9]{1, 3}$"  한/두/세자리 숫자
	 - \d 숫자 지칭
	 - 휴대폰 번호 (10, 11자리) : r"^010[1-9]\d{6,7}$


	2) blog/templates/index.html 
	
	3) http://localhost:8000/ 
		접속 확인
		main page
		
	4) Bootstrap
	
		get started css copy
		ex -> cover
		html은 왼쪽 정렬, bootstrap은 가운데
		
		f12 -> sources -> examples/css -> cover.css 파일 -> 우클릭 save as 저장


	5) base template html 파일을, blog project 안의 templates 폴더 안에 생성
	
7. ModelForm을 생성
	- 사용자 입력 양식을 우리가 직접 HTML template 안에 입력하는 것이 아니라, 
	- Model을 기반으로 사용자 입력양식을 자동으로 생성해주는 작업을
	 -> ModelForm 으로 할 수 있다.
	 
	 
	- class를 작성해야 한다.	
	 - posts/forms.py에서 class PostForm 작성
	 
8. list page 생성
	- views.py -> def p_list(request):
	- list.html
	
9. create page 생성

	1) <script src="/static/js/posts.js"></script>
	2) location.href=''
		자바스크립트 함수, 현재 브라우저 위치 변경
		
	3) urls 설정
	
	4) views.py	
		def p_create(request)
		
		form에서 부터의 요청이 아닌 요청은 모두 GET 방식이다.
		post 방식일 때 -> list.html 안의 form에서 내용을 전달받아, post:list로 redirect
		get -> 빈 form 객체를 생성해서 보여준다.
		

10. delete 기능 구현
	1) html
	
	2) path('<int:post_id>/delete/', views.p_delete, name='delete'),
	
	3) views.py

11. 수정 views.py
		

		
		