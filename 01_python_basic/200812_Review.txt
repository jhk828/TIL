<Python 언어>

1. data type

2. 자료구조 - list, tuple, dict, set

3. 제어문 - if, for, while

4.  객체지향 언어 - Java => class, instance, 상속, 다형성
	함수형 언어 - JavaScript => closure, lambda
	
5. 기타 등등의 기능, 문법 - exception 처리

6. 모듈 (package)


===

 1. data type  - Built-in Data Type
 - Numeric (숫자형) - 정수, 실수, 복소수 / int, float, complex
 - Sequence Type (연속형) - list, tuple, range
 - Text Sequence Type (문자열) - str
 - Mapping Type - dict
 - Set - set
 - Bool - True, False
 

 # 클래스가 뭔지 알고 싶을 때 쓰는 내장함수 -> type()

 # 문자열, list -> Indexing, Slicing
 
 # 연산 => 프로그래밍 언어에서의 연산(사칙연산)은, 같은 데이터 타입 끼리 이루어진다.
   - "Hello" + "World" => 가능
   - 'Hello' + 'World' => 가능
   - 'Hello' + 100 => 오류 
   - 'Hello' + str(100) => 가능

 2. list, tuple, range 
  1) list가 가장 많이 사용되는 자료구조 []
  2) tuple : list랑 비슷하지만, tuple 안의 내용을 수정, 삭제할 수 없다. 
	 (1, 2, 3)
	 (1, )
  3) dict : key와 value의 쌍으로 데이터를 표현 {}
  4) set : dict와 데이터를 표현하는 기호가 같다 {1, 2, 3}
 
 
 3. 제어문
  - if: 조건... elif: 조건... else: ..
  - for tmp in range():
  - for tmp in list, tuple, dict 
  
 6. Bool => True, False
  - 빈 list [], 빈 tupe (), 빈 dict {}, 숫자 0, None, => False
  
 
 4. 함수 정의 def
 
 4. 객체지향
  1) 프로그램의 유지보수와 재활용성에 초점을 맞추는 개발방법론
  2) 프로그램의 기능보다는 구성요소, 각 요소들간의 작용 
  3) 설계하고 구현하기가 상대적으로 어렵다.
  4) 현실 세계의 문제를 그대로 프로그래밍 적으로 모델링 하는 방법
  5) 하나의 클래스의 내용을 이어받아서 다른 클래스를 작성 => 상속
	class Student(Person):
	상속은 객체 지향의 꽃이라 부르는 가장 중요한 특성 중 하나.
  6) class로부터 실제 사용 가능한 메모리 공간을 만들어 낼 수 있다.
	 => instance (객체)
  7) 객체를 생성할 때 맨 처음에 초기화 목적으로 호출되는 함수
	 __init__(self)
	 __를 이용해서 특정 목적의 함수를 클래스 내부에서 재정의할 수 있다. => Magic Function 
	 하위 클래스에서 이런 method를 재 정의해서 하는 일을 변경해서 사용할 수 있다 => method overriding
	 클래스의 method나 함수의 인자를 사용할 때 원래는 맞게끔 사용해야 한다. 
	 
  8) def my_sun(*a): 
		# 인자를 tuple로 받는 방법

	 my_sum(10, 20, 30, 40, 50)
	 
  9) class 내부에는 여러가지가 나올 수 있다.
	- init안에서 정의되는 instance variable
	- class안에서 정의되는 class variable
		
	 
	 
 7. First class citizen, Closure, Decorator
	
	1) First class citizen
	 1> 프로그래밍 개체가 변수나 데이터 구조에 저장이 가능하다.
	 2> 프로그래밍 개체가 함수의 인자로 사용되는
	 3> 프로그래밍 개체를 함수가 리턴할 수 있다.
	 
	
 8. List Comprehension
    [ tmp for tmp in range(100) if tmp % 10 == 0 ]
	
	
== 	
 DB는 2가지를 기억하자
 
 1. 한 테이블에서 레코드를 유일하게 식별할 수 있는 column => pk
 2. fk
 
 
== 
Django

1. 기본 HTMl tag
	 <html>, <head>, <body>, <a>, <img>, <ul>, <li>, <div>
 
2. jQuery
 1) selector
  - id를 이용하는 selector => #
  - class를 이용하는 selector => .
  - 구조 selectgor => div > li: 자식
					  div  li: 후손
					  div + li : 형제 (바로 다음에 나오는 형제)
					  div ~ li : 형제 (다음에 나오는 모든 형제)
  2) method
   - remove() : 삭제
   - empty() : 자기 자신을 제외하고 후손만 삭제		
   - text() : tag 사이에 글자를 얻어온다.
   - val() : 입력 양식 안에 들어있는 데이터를 가져온다.
	 
  3) event 
   - on()을 이용해서 element에 이벤트를 등록해서 처리
   - $('#test').on('click', function() {})
	 
3. AJAX => 서버쪽 프로그램을 호출해서 그 결과를 JSON, XML 	 

4. 서버 쪽 웹 프로그래밍을 하기 위해 Django
	- 코드로 연습을 했다.
	1) 프로젝트 생성 Django-admin startproject mysite
	2) appllication 생성 python manage.py startapp 
	3) class 구현을 가지고 어떻게 Database를 구축할 지 표현한 명세 
	    makemigrations
    4) 명세가 준비되면 실제 Database 가서 처리를 진행
	    migrate 
	5) 서버쪽 세팅
	6) URL 세팅 -> view, template
	7) template 파일에서 template tag를 사용
	  {% %} : logic 처리 
	  {{  }} : 값 처리
	8) ModelForm 
	 - post 방식을 이용해서 처리, request.POST
	9) Django가 가지는 특징
	 - MVC가 아닌 MVT
	 - Model, View, Template
	 - ORM (Object Relation Mappling)
	 - 관리자 화면을 기본으로 제공
	 - Elegant URL - 정규표현식으로 URL을 표현
 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
